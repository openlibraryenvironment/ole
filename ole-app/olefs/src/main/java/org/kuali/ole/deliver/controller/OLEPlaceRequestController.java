package org.kuali.ole.deliver.controller;import org.apache.commons.lang.StringUtils;import org.kuali.asr.service.ASRHelperServiceImpl;import org.kuali.ole.OLEConstants;import org.kuali.ole.OLEPropertyConstants;import org.kuali.ole.deliver.bo.*;import org.kuali.ole.deliver.form.OLEPlaceRequestForm;import org.kuali.ole.deliver.processor.LoanProcessor;import org.kuali.ole.deliver.service.CircDeskLocationResolver;import org.kuali.ole.deliver.service.OleDeliverRequestDocumentHelperServiceImpl;import org.kuali.ole.describe.bo.OleLocation;import org.kuali.ole.docstore.common.client.DocstoreClientLocator;import org.kuali.ole.docstore.common.document.BibTree;import org.kuali.ole.docstore.common.document.HoldingsTree;import org.kuali.ole.docstore.common.document.Item;import org.kuali.ole.docstore.common.document.content.instance.xstream.ItemOlemlRecordProcessor;import org.kuali.ole.ncip.bo.OLEPlaceRequest;import org.kuali.ole.ncip.converter.OLEPlaceRequestConverter;import org.kuali.ole.ncip.service.OLECirculationService;import org.kuali.ole.ncip.service.impl.OLECirculationServiceImpl;import org.kuali.ole.service.OleCirculationPolicyService;import org.kuali.ole.service.OleCirculationPolicyServiceImpl;import org.kuali.ole.sys.context.SpringContext;import org.kuali.rice.core.api.config.property.ConfigContext;import org.kuali.rice.kim.api.identity.IdentityService;import org.kuali.rice.kim.api.identity.address.EntityAddress;import org.kuali.rice.kim.api.services.KimApiServiceLocator;import org.kuali.rice.kim.impl.identity.address.EntityAddressBo;import org.kuali.rice.kim.impl.identity.address.EntityAddressTypeBo;import org.kuali.rice.kim.impl.identity.entity.EntityBo;import org.kuali.rice.krad.service.BusinessObjectService;import org.kuali.rice.krad.service.KRADServiceLocator;import org.kuali.rice.krad.uif.UifConstants;import org.kuali.rice.krad.uif.UifParameters;import org.kuali.rice.krad.util.GlobalVariables;import org.kuali.rice.krad.util.KRADConstants;import org.kuali.rice.krad.web.controller.UifControllerBase;import org.kuali.rice.krad.web.form.UifFormBase;import org.springframework.stereotype.Controller;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.sql.Date;import java.text.SimpleDateFormat;import java.util.*;/** * Created by arunag on 12/16/14. */@Controller@RequestMapping(value = "/placeRequestController")public class OLEPlaceRequestController extends UifControllerBase{    private OLEPlaceRequestConverter olePlaceRequestConverter = new OLEPlaceRequestConverter();    private DocstoreClientLocator docstoreClientLocator;    private ItemOlemlRecordProcessor itemOlemlRecordProcessor;    private BusinessObjectService businessObjectService;    private OleCirculationPolicyService oleCirculationPolicyService;    private LoanProcessor loanProcessor = new LoanProcessor();    private OleDeliverRequestDocumentHelperServiceImpl oleDeliverRequestDocumentHelperService;    private OLECirculationService oleCirculationService ;    private CircDeskLocationResolver circDeskLocationResolver;    private CircDeskLocationResolver getCircDeskLocationResolver() {        if (circDeskLocationResolver == null) {            circDeskLocationResolver = new CircDeskLocationResolver();        }        return circDeskLocationResolver;    }    public void setCircDeskLocationResolver(CircDeskLocationResolver circDeskLocationResolver) {        this.circDeskLocationResolver = circDeskLocationResolver;    }    public DocstoreClientLocator getDocstoreClientLocator() {        if (docstoreClientLocator == null) {            docstoreClientLocator = SpringContext.getBean(DocstoreClientLocator.class);        }        return docstoreClientLocator;    }    public ItemOlemlRecordProcessor getItemOlemlRecordProcessor() {        if(itemOlemlRecordProcessor == null){            itemOlemlRecordProcessor = SpringContext.getBean(ItemOlemlRecordProcessor.class);        }        return itemOlemlRecordProcessor;    }    public BusinessObjectService getBusinessObjectService() {        if (null == businessObjectService) {            businessObjectService = KRADServiceLocator.getBusinessObjectService();        }        return businessObjectService;    }    public OleCirculationPolicyService getOleCirculationPolicyService() {        if (null == oleCirculationPolicyService) {            oleCirculationPolicyService = SpringContext.getBean(OleCirculationPolicyServiceImpl.class);        }        return oleCirculationPolicyService;    }    public LoanProcessor getLoanProcessor() {        return loanProcessor;    }    public void setDocstoreClientLocator(DocstoreClientLocator docstoreClientLocator) {        this.docstoreClientLocator = docstoreClientLocator;    }    public void setItemOlemlRecordProcessor(ItemOlemlRecordProcessor itemOlemlRecordProcessor) {        this.itemOlemlRecordProcessor = itemOlemlRecordProcessor;    }    public void setBusinessObjectService(BusinessObjectService businessObjectService) {        this.businessObjectService = businessObjectService;    }    public void setOleCirculationPolicyService(OleCirculationPolicyService oleCirculationPolicyService) {        this.oleCirculationPolicyService = oleCirculationPolicyService;    }    public void setLoanProcessor(LoanProcessor loanProcessor) {        this.loanProcessor = loanProcessor;    }    public OleDeliverRequestDocumentHelperServiceImpl getOleDeliverRequestDocumentHelperService() {        if(oleDeliverRequestDocumentHelperService == null){            this.oleDeliverRequestDocumentHelperService = new OleDeliverRequestDocumentHelperServiceImpl();        }        return oleDeliverRequestDocumentHelperService;    }    public void setOleDeliverRequestDocumentHelperService(OleDeliverRequestDocumentHelperServiceImpl oleDeliverRequestDocumentHelperService) {        this.oleDeliverRequestDocumentHelperService = oleDeliverRequestDocumentHelperService;    }    public OLECirculationService getOleCirculationService() {        if(oleCirculationService == null){            oleCirculationService = new OLECirculationServiceImpl();        }        return oleCirculationService;    }    public void setOleCirculationService(OLECirculationService oleCirculationService) {        this.oleCirculationService = oleCirculationService;    }    private IdentityService identityService;    public IdentityService getIdentityService() {        if (identityService == null) {            identityService = KimApiServiceLocator.getIdentityService();        }        return identityService;    }    @Override    protected UifFormBase createInitialForm(HttpServletRequest request) {        return new OLEPlaceRequestForm();    }    @Override    @RequestMapping(params = "methodToCall=start")    public ModelAndView start(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                              HttpServletRequest request, HttpServletResponse response) {        OLEPlaceRequestForm olePlaceRequestForm=(OLEPlaceRequestForm)form;        org.kuali.ole.docstore.common.document.Item item = null;        try {            item = getDocstoreClientLocator().getDocstoreClient().retrieveItem(olePlaceRequestForm.getItemId());        } catch (Exception e) {            e.printStackTrace();        }        org.kuali.ole.docstore.common.document.content.instance.Item itemContent = getItemOlemlRecordProcessor().fromXML(item.getContent());        olePlaceRequestForm.setTitle(item.getHolding().getBib().getTitle());        olePlaceRequestForm.setAuthor(item.getHolding().getBib().getAuthor());        olePlaceRequestForm.setHoldingId(item.getHolding().getId());        olePlaceRequestForm.setItemBarcode(itemContent.getAccessInformation().getBarcode());        olePlaceRequestForm.setItemLocation(item.getHolding().getLocationName());        olePlaceRequestForm.setItemStatus(itemContent.getItemStatus().getCodeValue());        olePlaceRequestForm.setItemType(itemContent.getItemType().getCodeValue());        if(olePlaceRequestForm.getItemStatus().equalsIgnoreCase("LOST")){                olePlaceRequestForm.setErrorMessage("Request cannot be placed for the lost item .");                olePlaceRequestForm.setItemEligible(false);                olePlaceRequestForm.setBlockOverride(true);                olePlaceRequestForm.setBlockSubmit(true);        }else if(itemContent.isClaimsReturnedFlag()){                olePlaceRequestForm.setErrorMessage("Item has been claimed returned .So request cannot be placed for this item");                olePlaceRequestForm.setItemEligible(false);                olePlaceRequestForm.setBlockOverride(true);                olePlaceRequestForm.setBlockSubmit(true);        }        else if(itemContent.isMissingPieceFlag()){               olePlaceRequestForm.setErrorMessage("Missing piece flag has been enabled for this item .So request cannot be placed for this item");               olePlaceRequestForm.setItemEligible(false);               olePlaceRequestForm.setBlockOverride(true);               olePlaceRequestForm.setBlockSubmit(true);        }else if(!validateItemStatus(olePlaceRequestForm)){            olePlaceRequestForm.setErrorMessage("Request cannot be place for an item with item status : " + olePlaceRequestForm.getItemStatus());            olePlaceRequestForm.setItemEligible(false);            olePlaceRequestForm.setBlockOverride(false);            olePlaceRequestForm.setBlockSubmit(true);        }        if(getCircDeskLocationResolver().getLocationMap(olePlaceRequestForm.getItemLocation()).get(OLEConstants.ITEM_SHELVING)!=null){            Map<String,String> locationMap = new HashMap<String,String>();            locationMap.put("locationCode",getCircDeskLocationResolver().getLocationMap(olePlaceRequestForm.getItemLocation()).get(OLEConstants.ITEM_SHELVING));            List<OleLocation> oleLocationBos = (List<OleLocation>)KRADServiceLocator.getBusinessObjectService().findMatching(OleLocation.class,locationMap);            if(oleLocationBos!=null && oleLocationBos.size()>0){                Map<String,String> circulationDeskLocationMap = new HashMap<String,String>();                circulationDeskLocationMap.put("circulationDeskLocation",oleLocationBos.get(0).getLocationId());                List<OleCirculationDeskLocation> oleCirculationDeskLocationList = (List<OleCirculationDeskLocation>) KRADServiceLocator.getBusinessObjectService().findMatching(OleCirculationDeskLocation.class,circulationDeskLocationMap);                if(oleCirculationDeskLocationList!=null && oleCirculationDeskLocationList.size()>0){                    for(OleCirculationDeskLocation oleCirculationDeskLocation : oleCirculationDeskLocationList){                        if(oleCirculationDeskLocation.getCirculationPickUpDeskLocation()==null || (oleCirculationDeskLocation.getCirculationPickUpDeskLocation() !=null && oleCirculationDeskLocation.getCirculationPickUpDeskLocation().trim().isEmpty())) {                        String requestExpirationDays= oleCirculationDeskLocation.getOleCirculationDesk().getRequestExpirationDays();                            if(requestExpirationDays!=null && !requestExpirationDays.equalsIgnoreCase("0")){                                olePlaceRequestForm.setRequestExpiryDate(addDate(new Date(System.currentTimeMillis()),Integer.parseInt(requestExpirationDays)));                            }                        }                    }                }            }        }        return getUIFModelAndView(form);    }    @RequestMapping(params = "methodToCall=retrievePatronDetails")    public ModelAndView retrievePatronDetails(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                                              HttpServletRequest request, HttpServletResponse response) throws Exception {        OLEPlaceRequestForm olePlaceRequestForm=(OLEPlaceRequestForm)form;        if (olePlaceRequestForm.getPatronBarcode()!=null && !olePlaceRequestForm.getPatronBarcode().isEmpty()) {            Map<String, String> patronMap = new HashMap<String, String>();            patronMap.put(OLEConstants.OleDeliverRequest.PATRON_BARCODE, olePlaceRequestForm.getPatronBarcode());            List<OlePatronDocument> olePatronDocumentList = (List<OlePatronDocument>) getBusinessObjectService().findMatching(OlePatronDocument.class, patronMap);            if (olePatronDocumentList != null && olePatronDocumentList.size() > 0) {                EntityBo entityBo = olePatronDocumentList.get(0).getEntity();                olePlaceRequestForm.setPatronType(olePatronDocumentList.get(0).getOleBorrowerType().getBorrowerTypeName());                olePlaceRequestForm.setPatronName(getLoanProcessor().getPatronName(entityBo));                olePlaceRequestForm.setPatronFirstName(getLoanProcessor().getPatronName(entityBo));                olePlaceRequestForm.setPatronId(olePatronDocumentList.get(0).getOlePatronId());                olePlaceRequestForm.setPatronBarcode(olePatronDocumentList.get(0).getBarcode());                olePlaceRequestForm.setProcessRequest(false);                olePlaceRequestForm.setOlePatronDocument(olePatronDocumentList.get(0));                olePlaceRequestForm.setPatronFound(true);                String existingAddressType = null;                if(olePlaceRequestForm.getOlePatronDocument() != null && olePlaceRequestForm.getOlePatronDocument().getOleAddresses() != null && olePlaceRequestForm.getOlePatronDocument().getOleAddresses().size() > 0){                    for(OleAddressBo oleAddressBo : olePlaceRequestForm.getOlePatronDocument().getOleAddresses()){                        if(oleAddressBo.isDeliverAddress()){                            for(EntityAddressBo entityAddressBo :olePlaceRequestForm.getOlePatronDocument().getEntity().getEntityTypeContactInfos().get(0).getAddresses()){                               if(entityAddressBo.getId().equals(oleAddressBo.getId())){                                    olePlaceRequestForm.setOleEntityAddressBo(entityAddressBo);                                }                            }                            break;                        }else{olePlaceRequestForm.setOleEntityAddressBo(new EntityAddressBo());}                    }                    if(olePlaceRequestForm.getOlePatronDocument() != null && olePlaceRequestForm.getOlePatronDocument().getEntity() != null &&                            olePlaceRequestForm.getOlePatronDocument().getEntity().getEntityTypeContactInfos()!=null &&                            olePlaceRequestForm.getOlePatronDocument().getEntity().getEntityTypeContactInfos().size()>0 &&                            olePlaceRequestForm.getOlePatronDocument().getEntity().getEntityTypeContactInfos().get(0).getAddresses() != null &&                            olePlaceRequestForm.getOlePatronDocument().getEntity().getEntityTypeContactInfos().get(0).getAddresses().size()>0 ) {                        for(EntityAddressBo entityAddressBo :olePlaceRequestForm.getOlePatronDocument().getEntity().getEntityTypeContactInfos().get(0).getAddresses()) {                            if (StringUtils.isNotBlank(existingAddressType)) {                                existingAddressType = existingAddressType + "," + entityAddressBo.getAddressTypeCode();                            } else {                                existingAddressType = entityAddressBo.getAddressTypeCode();                            }                        }                    }                    olePlaceRequestForm.setExistingAddressType(existingAddressType);                }            } else {                olePlaceRequestForm.setErrorMessage("Not a valid patron barcode");                GlobalVariables.getMessageMap().putError(KRADConstants.GLOBAL_ERRORS, OLEConstants.OleDeliverRequest.INVALID_PATRON);            }        }        return getUIFModelAndView(olePlaceRequestForm);    }    @RequestMapping(params = "methodToCall=confirmPatron")    public ModelAndView confirmPatron(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                              HttpServletRequest request, HttpServletResponse response) throws Exception {        OLEPlaceRequestForm olePlaceRequestForm=(OLEPlaceRequestForm)form;        olePlaceRequestForm.setErrorMessage("");        if(olePlaceRequestForm.getOlePatronDocument() != null)            olePlaceRequestForm.getOlePatronDocument().setErrorMessage("");        OlePatronDocument patronErrorMessage = getOleDeliverRequestDocumentHelperService().validateGeneralChecks(olePlaceRequestForm.getOlePatronDocument());        olePlaceRequestForm.setAddressUpdated(false);        if(!isRequestAlreadyRaisedByPatron(olePlaceRequestForm.getPatronId(),olePlaceRequestForm.getItemBarcode())){        boolean blockPatron = false;        if (StringUtils.isBlank(olePlaceRequestForm.getOleEntityAddressBo().getId())) {            if(validatePatronNewAddress(olePlaceRequestForm)){                if (StringUtils.isNotBlank((olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode()))) {                    olePlaceRequestForm.getOleEntityAddressBo().setAddressTypeCode(olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode());                    olePlaceRequestForm.getOleEntityAddressBo().setAddressType(EntityAddressTypeBo.from(getIdentityService().getAddressType(olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode())));                    if (StringUtils.isNotBlank(olePlaceRequestForm.getExistingAddressType())) {                        if (olePlaceRequestForm.getExistingAddressType() != null && olePlaceRequestForm.getExistingAddressType().contains(olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode())) {                            blockPatron = true;                            String patronNameURL = getLoanProcessor().patronNameURL(GlobalVariables.getUserSession().getPrincipalId(), olePlaceRequestForm.getPatronId());                            String url = "<a target=\"_blank\" href=" + patronNameURL + ">" + olePlaceRequestForm.getPatronName() + "</a>";                            if(StringUtils.isNotBlank(patronErrorMessage.getErrorMessage())) {                                String[] count =patronErrorMessage.getErrorMessage().split(OLEConstants.BREAK);                                patronErrorMessage.setErrorMessage(patronErrorMessage.getErrorMessage() + (count.length+1)+". The Address type already exist for "+OLEConstants.H5 +url+OLEConstants.H5_CLOSE);                            }else {                                patronErrorMessage.setErrorMessage("1. The Address type already exist to " + OLEConstants.H5 + url + OLEConstants.H5_CLOSE);                            }                            // return getUIFModelAndView(form);                        }                    }                    patronErrorMessage.setBlockPatron(blockPatron);                }            }else{                blockPatron = true;                patronErrorMessage.setBlockPatron(blockPatron);                if(StringUtils.isNotBlank(patronErrorMessage.getErrorMessage())) {                    String[] count =patronErrorMessage.getErrorMessage().split(OLEConstants.BREAK);                    patronErrorMessage.setErrorMessage(patronErrorMessage.getErrorMessage() + (count.length+1)+". Please select address type "+OLEConstants.BREAK);                }else {                    patronErrorMessage.setErrorMessage("1. Please select address type " + OLEConstants.BREAK);                }            }        }        if(StringUtils.isNotBlank(patronErrorMessage.getErrorMessage())){            olePlaceRequestForm.setBlockOverride(patronErrorMessage.isBlockPatron());            olePlaceRequestForm.setErrorMessage(patronErrorMessage.getErrorMessage());            return getUIFModelAndView(form);        }        boolean isDeliverAddress = false;        isDeliverAddress = (boolean) getOleDeliverRequestDocumentHelperService().deliverAddressExist(olePlaceRequestForm.getPatronId());        olePlaceRequestForm.setAddress(isDeliverAddress);        olePlaceRequestForm.setProcessRequest(true);        Map<String,List<String>> requestStatusMap = getOleDeliverRequestDocumentHelperService().getItemStatusBasedOnRequestTypeMap();        if(requestStatusMap.get("recall").contains(olePlaceRequestForm.getItemStatus())){            olePlaceRequestForm.setRecallRequest(true);        }        if(requestStatusMap.get("hold").contains(olePlaceRequestForm.getItemStatus())){            olePlaceRequestForm.setHoldRequest(true);        }        if(requestStatusMap.get("page").contains(olePlaceRequestForm.getItemStatus())){            olePlaceRequestForm.setPageRequest(true);        }        if(requestStatusMap.get("copy").contains(olePlaceRequestForm.getItemStatus())){            olePlaceRequestForm.setCopyRequest(true);        }        if(requestStatusMap.get("asr").contains(olePlaceRequestForm.getItemStatus())){            olePlaceRequestForm.setAsrRequest(true);        }        String requestLevel =loanProcessor.getParameter("DEFAULT_REQUEST_LEVEL");        if(requestLevel.equalsIgnoreCase("Item")){            requestLevel = "itemLevel";        }else if(requestLevel.equalsIgnoreCase("Title")){            requestLevel = "titleLevel";        }        olePlaceRequestForm.setRequestLevel(requestLevel);        String titleLevelRequest =loanProcessor.getParameter("TITLE_LEVEL_REQUEST_INDICATOR");        if(titleLevelRequest!=null && titleLevelRequest.equalsIgnoreCase("Y")){            olePlaceRequestForm.setTitleLevelRequest(true);        }        }else{            olePlaceRequestForm.setBlockOverride(true);            olePlaceRequestForm.setErrorMessage(ConfigContext.getCurrentContextConfig().getProperty(OLEConstants.RQST_ALRDY_RAISD));        }        return getUIFModelAndView(form);    }    @RequestMapping(params = "methodToCall=searchPatron")    public ModelAndView searchPatron(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                                      HttpServletRequest request, HttpServletResponse response) throws Exception {        OLEPlaceRequestForm olePlaceRequestForm=(OLEPlaceRequestForm)form;        if (olePlaceRequestForm.getPatronBarcode()!=null && !olePlaceRequestForm.getPatronBarcode().isEmpty()) {            Map<String, String> patronMap = new HashMap<String, String>();            patronMap.put(OLEConstants.OleDeliverRequest.PATRON_BARCODE, olePlaceRequestForm.getPatronBarcode());            List<OlePatronDocument> olePatronDocumentList = (List<OlePatronDocument>) getBusinessObjectService().findMatching(OlePatronDocument.class, patronMap);            if (olePatronDocumentList != null && olePatronDocumentList.size() > 0) {                EntityBo entityBo = olePatronDocumentList.get(0).getEntity();                olePlaceRequestForm.setPatronType(olePatronDocumentList.get(0).getOleBorrowerType().getBorrowerTypeName());                olePlaceRequestForm.setPatronName(getLoanProcessor().getPatronName(entityBo));                olePlaceRequestForm.setPatronId(olePatronDocumentList.get(0).getOlePatronId());                olePlaceRequestForm.setPatronBarcode(olePatronDocumentList.get(0).getBarcode());                olePlaceRequestForm.setProcessRequest(false);                olePlaceRequestForm.setOlePatronDocument(olePatronDocumentList.get(0));                olePlaceRequestForm.setPatronFound(true);            }else{                olePlaceRequestForm.setErrorMessage("Not a valid patron barcode");            }        }     return getUIFModelAndView(form);    }    @RequestMapping(params = "methodToCall=refresh")    public ModelAndView refresh(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                                HttpServletRequest request, HttpServletResponse response) throws Exception {        OLEPlaceRequestForm olePlaceRequestForm=(OLEPlaceRequestForm)form;        if (StringUtils.isBlank(olePlaceRequestForm.getPatronFirstName()) || (olePlaceRequestForm.getOlePatronDocument() != null && !olePlaceRequestForm.getOlePatronDocument().getBarcode().equals(olePlaceRequestForm.getPatronBarcode()))) {            super.refresh(olePlaceRequestForm, result, request, response);            olePlaceRequestForm.setErrorMessage(null);            return retrievePatronDetails(olePlaceRequestForm, result, request, response);        }        return super.refresh(olePlaceRequestForm, result, request, response);    }    @RequestMapping(params = "methodToCall=processRequest")    public ModelAndView processRequest(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                                HttpServletRequest request, HttpServletResponse response) throws Exception {        OLEPlaceRequestForm olePlaceRequestForm=(OLEPlaceRequestForm)form;        return getUIFModelAndView(form);    }    @RequestMapping(params = "methodToCall=submit")    public ModelAndView submit(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                                       HttpServletRequest request, HttpServletResponse response) throws Exception {        OLEPlaceRequestForm olePlaceRequestForm=(OLEPlaceRequestForm)form;        StringBuffer successMessageBuffer = new StringBuffer();        StringBuffer failureMessageBuffer = new StringBuffer();        olePlaceRequestForm.setErrorMessage(null);        olePlaceRequestForm.setSuccessMessage(null);        ASRHelperServiceImpl asrHelperService = new ASRHelperServiceImpl();        if(olePlaceRequestForm.getPickUpLocationId()!=null && !olePlaceRequestForm.getPickUpLocationId().trim().isEmpty()){            OleCirculationDesk oleCirculationDesks = KRADServiceLocator.getBusinessObjectService().findBySinglePrimaryKey(OleCirculationDesk.class,olePlaceRequestForm.getPickUpLocationId());            olePlaceRequestForm.setPickUpLocationCode(oleCirculationDesks.getCirculationDeskCode());        }        if(olePlaceRequestForm.getRecallRequestType()!=null){            olePlaceRequestForm.setRequestType("recall");        }else if(olePlaceRequestForm.getHoldRequestType()!=null){            olePlaceRequestForm.setRequestType("hold");        }else if(olePlaceRequestForm.getPageRequestType()!=null){            olePlaceRequestForm.setRequestType("page");        }else if(olePlaceRequestForm.getCopyRequestType()!=null){            olePlaceRequestForm.setRequestType("copy");        }else if(olePlaceRequestForm.getAsrRequestType()!=null){            olePlaceRequestForm.setRequestType("asr");        }        if(olePlaceRequestForm.getRequestType()==null || (olePlaceRequestForm.getRequestType()!=null && olePlaceRequestForm.getRequestType().trim().isEmpty())){            olePlaceRequestForm.setErrorMessage("Please select a request request type");            olePlaceRequestForm.setBlockOverride(true);            return getUIFModelAndView(form);        }        if(olePlaceRequestForm.getRequestType().equalsIgnoreCase("recall")){            if(olePlaceRequestForm.getPickUpLocationId()==null ||(olePlaceRequestForm.getPickUpLocationId()!=null &&  olePlaceRequestForm.getPickUpLocationId().trim().isEmpty())){                olePlaceRequestForm.setRequestType("Recall/Delivery Request");            }else{                olePlaceRequestForm.setRequestType("Recall/Hold Request");            }        }        if(olePlaceRequestForm.getRequestType().equalsIgnoreCase("hold")){            if(olePlaceRequestForm.getPickUpLocationId()==null ||(olePlaceRequestForm.getPickUpLocationId()!=null &&  olePlaceRequestForm.getPickUpLocationId().trim().isEmpty())){                olePlaceRequestForm.setRequestType("Hold/Delivery Request");            }else{                olePlaceRequestForm.setRequestType("Hold/Hold Request");            }        }        if(olePlaceRequestForm.getRequestType().equalsIgnoreCase("page")){            if(olePlaceRequestForm.getPickUpLocationId()==null ||(olePlaceRequestForm.getPickUpLocationId()!=null &&  olePlaceRequestForm.getPickUpLocationId().trim().isEmpty())){                olePlaceRequestForm.setRequestType("Page/Delivery Request");            }else{                olePlaceRequestForm.setRequestType("Page/Hold Request");            }        }        if(olePlaceRequestForm.getRequestType().equalsIgnoreCase("copy")){            olePlaceRequestForm.setRequestType("Copy Request");        }        if(olePlaceRequestForm.getRequestType().equalsIgnoreCase("asr")){            olePlaceRequestForm.setRequestType("ASR Request");        }        if(olePlaceRequestForm.getRequestType().equalsIgnoreCase("ASR Request")){          if(!asrHelperService.isAnASRItem(olePlaceRequestForm.getItemLocation())){              olePlaceRequestForm.setBlockOverride(true);              olePlaceRequestForm.setErrorMessage(ConfigContext.getCurrentContextConfig().getProperty(OLEConstants.NO_ASR_REQUEST));              return getUIFModelAndView(form);          }        }        if(!olePlaceRequestForm.getOlePatronDocument().isDeliveryPrivilege() && (olePlaceRequestForm.getPickUpLocationId()==null || (olePlaceRequestForm.getPickUpLocationId()!=null && olePlaceRequestForm.getPickUpLocationId().trim().isEmpty()))){            olePlaceRequestForm.setErrorMessage("Patron is not having the delivery privilege .Choose a pick up Location ");            olePlaceRequestForm.setBlockOverride(false);            return getUIFModelAndView(form);        }        if (StringUtils.isNotBlank(olePlaceRequestForm.getOleEntityAddressBo().getId()) &&  !olePlaceRequestForm.isAddressUpdated()){            getIdentityService().updateAddress(EntityAddressBo.to(olePlaceRequestForm.getOleEntityAddressBo()));            olePlaceRequestForm.setAddressUpdated(true);        } else if(StringUtils.isNotBlank(olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode())){            olePlaceRequestForm.getOleEntityAddressBo().setEntityId(olePlaceRequestForm.getPatronId());            if(StringUtils.isNotBlank((olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode()))) {                olePlaceRequestForm.getOleEntityAddressBo().setAddressTypeCode(olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode());                olePlaceRequestForm.getOleEntityAddressBo().setAddressType(EntityAddressTypeBo.from(getIdentityService().getAddressType(olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode())));            }            olePlaceRequestForm.getOleEntityAddressBo().setEntityTypeCode("PERSON");            olePlaceRequestForm.getOleEntityAddressBo().setActive(true);            if(StringUtils.isNotBlank(olePlaceRequestForm.getExistingAddressType())){                if(olePlaceRequestForm.getExistingAddressType() != null && olePlaceRequestForm.getExistingAddressType().contains(olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode())){                    String patronNameURL = getLoanProcessor().patronNameURL(GlobalVariables.getUserSession().getPrincipalId(), olePlaceRequestForm.getPatronId());                    String url="<a target=\"_blank\" href="+patronNameURL+">"+olePlaceRequestForm.getPatronName()+"</a>";                    //failureMessageBuffer.append("The Address type already exist to "+OLEConstants.H5+url+OLEConstants.H5_CLOSE);                    olePlaceRequestForm.setBlockOverride(true);                    olePlaceRequestForm.setErrorMessage("The Address type already exist to "+OLEConstants.H5+url+OLEConstants.H5_CLOSE);                    return getUIFModelAndView(form);                }else {                    EntityAddress entityAddress = getIdentityService().addAddressToEntity(EntityAddressBo.to(olePlaceRequestForm.getOleEntityAddressBo()));                    HashMap<String, String> map = new HashMap<String, String>();                    map.put(OLEConstants.OlePatron.OLE_ADD_SRC_CD, "OPT");                    List<OleAddressSourceBo> addressSourceList = (List<OleAddressSourceBo>) getBusinessObjectService().findMatching(OleAddressSourceBo.class, map);                    OleAddressBo oleAddressBo = new OleAddressBo();                    oleAddressBo.setId(entityAddress.getId());                    oleAddressBo.setDeliverAddress(true);                    oleAddressBo.setAddressVerified(true);                    oleAddressBo.setOleAddressId(KRADServiceLocator.getSequenceAccessorService().getNextAvailableSequenceNumber("OLE_DLVR_ADD_S").toString());                    oleAddressBo.setOlePatronId(olePlaceRequestForm.getPatronId());                    oleAddressBo.setAddressSource(addressSourceList!=null && addressSourceList.size()>0?addressSourceList.get(0).getOleAddressSourceId():null);                    oleAddressBo.setAddressSourceBo(addressSourceList!=null && addressSourceList.size()>0?addressSourceList.get(0):null);                    KRADServiceLocator.getBusinessObjectService().save(oleAddressBo);                }            }        }        SimpleDateFormat expirationDate = new SimpleDateFormat("yyyyMMdd");        if(olePlaceRequestForm.getRequestLevel().equals("itemLevel")){         String circulationResponse = getOleCirculationService().placeRequest(olePlaceRequestForm.getPatronBarcode(),GlobalVariables.getUserSession().getPrincipalId(),olePlaceRequestForm.getItemBarcode(),olePlaceRequestForm.getRequestType(),olePlaceRequestForm.getPickUpLocationCode(),olePlaceRequestForm.getItemLocation(),olePlaceRequestForm.getBibId(),"Item Level",olePlaceRequestForm.getRequestExpiryDate(), olePlaceRequestForm.getRequestNote());            OLEPlaceRequest olePlaceRequest = (OLEPlaceRequest) olePlaceRequestConverter.generatePlaceRequestObject(circulationResponse);            if(olePlaceRequest.getMessage().contains(OLEConstants.RQST_SUCCESS)){                successMessageBuffer.append(olePlaceRequest.getMessage() + " with Barcode "+olePlaceRequestForm.getItemBarcode() +OLEConstants.BREAK);            }else{                failureMessageBuffer.append(olePlaceRequest.getMessage() + OLEConstants.BREAK);            }            if(olePlaceRequest.getMessage().equalsIgnoreCase(OLEConstants.NO_RULE_FOUND) || olePlaceRequest.getMessage().equalsIgnoreCase(ConfigContext.getCurrentContextConfig().getProperty(OLEConstants.RQST_ALRDY_RAISD))){                olePlaceRequest.setBlockOverride(true);            }            if(olePlaceRequest.getExpirationDate()!=null) {                olePlaceRequestForm.setRequestExpiryDate(new java.sql.Date(expirationDate.parse(olePlaceRequest.getExpirationDate()).getTime()));            }            olePlaceRequestForm.setBlockOverride(olePlaceRequest.isBlockOverride());            olePlaceRequestForm.setSuccessMessage(successMessageBuffer.toString());            olePlaceRequestForm.setErrorMessage(failureMessageBuffer.toString());        }        if(olePlaceRequestForm.getRequestLevel().equals("titleLevel")){            try{                OLEPlaceRequest olePlaceRequest = null;                String circulationResponse = null;                boolean overrideBlock = false;                if(olePlaceRequestForm.getTitleLevelRequestItems()!=null && olePlaceRequestForm.getTitleLevelRequestItems().size()>0){                  for(OleTitleLevelRequestItem oleTitleLevelRequestItem :olePlaceRequestForm.getTitleLevelRequestItems()){                      circulationResponse = getOleCirculationService().placeRequest(olePlaceRequestForm.getPatronBarcode(),GlobalVariables.getUserSession().getPrincipalId(),oleTitleLevelRequestItem.getItemBarcode(),olePlaceRequestForm.getRequestType(),olePlaceRequestForm.getPickUpLocationCode(),oleTitleLevelRequestItem.getItemLocation(),olePlaceRequestForm.getBibId(),"Title Level",olePlaceRequestForm.getRequestExpiryDate(), olePlaceRequestForm.getRequestNote());                      olePlaceRequest = (OLEPlaceRequest) olePlaceRequestConverter.generatePlaceRequestObject(circulationResponse);                      overrideBlock = olePlaceRequest.isBlockOverride();                      if(olePlaceRequest.getMessage().contains(OLEConstants.RQST_SUCCESS)){                          successMessageBuffer.append(olePlaceRequest.getMessage() + " with Barcode "+oleTitleLevelRequestItem.getItemBarcode() +OLEConstants.BREAK);                      }else{                          failureMessageBuffer.append(olePlaceRequest.getMessage() +OLEConstants.BREAK);                      }                  }                }else{                    olePlaceRequestForm.setBlockOverride(true);                    olePlaceRequestForm.setErrorMessage("Please select an item for placing a request");                  return  getUIFModelAndView(form);                }                if(olePlaceRequest.getExpirationDate()!=null) {                    olePlaceRequestForm.setRequestExpiryDate(new java.sql.Date(expirationDate.parse(olePlaceRequest.getExpirationDate()).getTime()));                }                olePlaceRequestForm.setBlockOverride(overrideBlock);                olePlaceRequestForm.setSuccessMessage(successMessageBuffer.toString());                olePlaceRequestForm.setErrorMessage(failureMessageBuffer.toString());            }catch(Exception e){                e.printStackTrace();            }        }        return getUIFModelAndView(form);    }    @RequestMapping(params = "methodToCall=overRide")    public ModelAndView overRide(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                                 HttpServletRequest request, HttpServletResponse response) {        OLEPlaceRequestForm olePlaceRequestForm = (OLEPlaceRequestForm) form;            olePlaceRequestForm.setErrorMessage(null);            olePlaceRequestForm.setOverrideFlag(true);            String principalId = GlobalVariables.getUserSession().getPrincipalId();            boolean newPrincipalFlag = false;            if (olePlaceRequestForm.getNewPrincipalId() != null && !olePlaceRequestForm.getNewPrincipalId().trim().isEmpty()) {                principalId = olePlaceRequestForm.getNewPrincipalId();                newPrincipalFlag = true;            }            //  Boolean overRideFlag = getLoanProcessor().checkOverRidePermission(principalId, olePlaceRequestForm);            Boolean overRideFlag = false;            if (overRideFlag) {                if ((!"".equals(olePlaceRequestForm.getNewPrincipalId()) && olePlaceRequestForm.getNewPrincipalId() != null)) {                    olePlaceRequestForm.setLoanLoginName(olePlaceRequestForm.getNewPrincipalId());                    GlobalVariables.getUserSession().setBackdoorUser(olePlaceRequestForm.getNewPrincipalId());                    //oleLoanForm.getDummyLoan().setLoanApproverId(GlobalVariables.getUserSession().getPerson().getEntityId());                }                if (!newPrincipalFlag) {                    olePlaceRequestForm.setLoanLoginName(principalId);                    GlobalVariables.getUserSession().setBackdoorUser(principalId);                }                olePlaceRequestForm.setNewPrincipalId("");                olePlaceRequestForm.setOverrideFlag(false);                // olePlaceRequestForm.setOverideMethodCall("");                return null;            }            olePlaceRequestForm.setNewPrincipalId(null);            GlobalVariables.getUserSession().clearBackdoorUser();            if (!"".equals(olePlaceRequestForm.getNewPrincipalId())) {                olePlaceRequestForm.setOverrideLoginMessage(principalId + " " + OLEConstants.OVERRIDE_LOGIN_ERR_INFO + OLEConstants.BREAK + olePlaceRequestForm.getOverrideErrorMessage());                olePlaceRequestForm.setOverrideErrorMessage(null);            }        return getUIFModelAndView(olePlaceRequestForm, olePlaceRequestForm.getPageId());    }    @RequestMapping(params = "methodToCall=overrideRequest")    public ModelAndView overrideRequest(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                                                     HttpServletRequest request, HttpServletResponse response) throws Exception {        OLEPlaceRequestForm olePlaceRequestForm=(OLEPlaceRequestForm)form;        olePlaceRequestForm.setErrorMessage(null);        boolean validItemStatus = validateItemStatus(olePlaceRequestForm);        if(!validItemStatus && StringUtils.isBlank(olePlaceRequestForm.getPatronId())) {            olePlaceRequestForm.setErrorMessage(null);            olePlaceRequestForm.setSuccessMessage(null);            olePlaceRequestForm.setItemEligible(true);            olePlaceRequestForm.setBlockSubmit(false);            return getUIFModelAndView(form);        }        if(!olePlaceRequestForm.isProcessRequest()) {            boolean isDeliverAddress = false;            isDeliverAddress = (boolean) getOleDeliverRequestDocumentHelperService().deliverAddressExist(olePlaceRequestForm.getPatronId());            olePlaceRequestForm.setAddress(isDeliverAddress);            olePlaceRequestForm.setProcessRequest(true);            Map<String, List<String>> requestStatusMap = getOleDeliverRequestDocumentHelperService().getItemStatusBasedOnRequestTypeMap();            if (requestStatusMap.get("recall").contains(olePlaceRequestForm.getItemStatus())) {                olePlaceRequestForm.setRecallRequest(true);            }            if (requestStatusMap.get("hold").contains(olePlaceRequestForm.getItemStatus())) {                olePlaceRequestForm.setHoldRequest(true);            }            if (requestStatusMap.get("page").contains(olePlaceRequestForm.getItemStatus())) {                olePlaceRequestForm.setPageRequest(true);            }            if (requestStatusMap.get("copy").contains(olePlaceRequestForm.getItemStatus())) {                olePlaceRequestForm.setCopyRequest(true);            }            if (requestStatusMap.get("asr").contains(olePlaceRequestForm.getItemStatus())) {                olePlaceRequestForm.setAsrRequest(true);            }            if(!validItemStatus) {                olePlaceRequestForm.setDisplayRequestType(true);            }            String requestLevel = loanProcessor.getParameter("DEFAULT_REQUEST_LEVEL");            if (requestLevel.equalsIgnoreCase("Item")) {                requestLevel = "itemLevel";            } else if (requestLevel.equalsIgnoreCase("Title")) {                requestLevel = "titleLevel";            }            olePlaceRequestForm.setRequestLevel(requestLevel);            String titleLevelRequest = loanProcessor.getParameter("TITLE_LEVEL_REQUEST_INDICATOR");            if (titleLevelRequest != null && titleLevelRequest.equalsIgnoreCase("Y")) {                olePlaceRequestForm.setTitleLevelRequest(true);            }        }else {            StringBuffer successMessageBuffer = new StringBuffer();            StringBuffer failureMessageBuffer = new StringBuffer();            olePlaceRequestForm.setErrorMessage(null);            olePlaceRequestForm.setSuccessMessage(null);            ModelAndView overrideModelView = null;            String principalId = GlobalVariables.getUserSession().getPrincipalId();            //Boolean overRideFlag = getLoanProcessor().checkOverRidePermission(principalId, olePlaceRequestForm);            //if (!overRideFlag) {            //overrideModelView = this.overRide(form, result, request, response);            // }           /* if (StringUtils.isNotBlank(olePlaceRequestForm.getOleEntityAddressBo().getId())) {                getIdentityService().updateAddress(EntityAddressBo.to(olePlaceRequestForm.getOleEntityAddressBo()));            } else {                olePlaceRequestForm.getOleEntityAddressBo().setEntityId(olePlaceRequestForm.getPatronId());                if(StringUtils.isNotBlank((olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode()))) {                    olePlaceRequestForm.getOleEntityAddressBo().setAddressTypeCode(olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode());                    olePlaceRequestForm.getOleEntityAddressBo().setAddressType(EntityAddressTypeBo.from(getIdentityService().getAddressType(olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode())));                }                olePlaceRequestForm.getOleEntityAddressBo().setEntityTypeCode("PERSON");                olePlaceRequestForm.getOleEntityAddressBo().setActive(true);                if(StringUtils.isNotBlank(olePlaceRequestForm.getExistingAddressType())){                    if(olePlaceRequestForm.getOleEntityAddressBo().getAddressTypeCode().contains(olePlaceRequestForm.getExistingAddressType())){                        String patronNameURL = getLoanProcessor().patronNameURL(GlobalVariables.getUserSession().getPrincipalId(), olePlaceRequestForm.getPatronId());                        String url="<a target=\"_blank\" href="+patronNameURL+">"+olePlaceRequestForm.getPatronName()+"</a>";                        successMessageBuffer.append("The Address type already exist to "+OLEConstants.H5+url+OLEConstants.H5_CLOSE);                        olePlaceRequestForm.setBlockOverride(true);                        return getUIFModelAndView(form);                    }else {                        getIdentityService().addAddressToEntity(EntityAddressBo.to(olePlaceRequestForm.getOleEntityAddressBo()));                    }                }            }*/            SimpleDateFormat expirationDate = new SimpleDateFormat("yyyyMMdd");            if (olePlaceRequestForm.getRequestLevel().equals("itemLevel")) {                String circulationResponse = "";                circulationResponse = getOleCirculationService().overridePlaceRequest(olePlaceRequestForm.getPatronBarcode(), GlobalVariables.getUserSession().getPrincipalId(), olePlaceRequestForm.getItemBarcode(), olePlaceRequestForm.getRequestType(), olePlaceRequestForm.getPickUpLocationCode(), olePlaceRequestForm.getItemLocation(), olePlaceRequestForm.getBibId(), "Item Level", olePlaceRequestForm.getRequestExpiryDate(), olePlaceRequestForm.getRequestNote());                OLEPlaceRequest olePlaceRequest = (OLEPlaceRequest) olePlaceRequestConverter.generatePlaceRequestObject(circulationResponse);              if(olePlaceRequest.getMessage().equals(OLEConstants.NO_RULE_FOUND) || olePlaceRequest.getMessage().equalsIgnoreCase(ConfigContext.getCurrentContextConfig().getProperty(OLEConstants.RQST_ALRDY_RAISD))){                  failureMessageBuffer.append(olePlaceRequest.getMessage());                  olePlaceRequest.setBlockOverride(true);                  olePlaceRequestForm.setBlockOverride(true);              }                    else if (olePlaceRequest.getMessage().contains(OLEConstants.RQST_SUCCESS)) {                    successMessageBuffer.append(olePlaceRequest.getMessage() + " with Barcode " + olePlaceRequestForm.getItemBarcode() + OLEConstants.BREAK);                    if(olePlaceRequest.getExpirationDate()!=null) {                        olePlaceRequestForm.setRequestExpiryDate(new java.sql.Date(expirationDate.parse(olePlaceRequest.getExpirationDate()).getTime()));                    }                }else{                  failureMessageBuffer.append(olePlaceRequest.getMessage());                  if(olePlaceRequest.getMessage()!=null && olePlaceRequest.getMessage().contains("Cannot create")){                  olePlaceRequestForm.setBlockOverride(true);                  }              }                olePlaceRequestForm.setSuccessMessage(successMessageBuffer.toString());                olePlaceRequestForm.setErrorMessage(failureMessageBuffer.toString());            }            if (olePlaceRequestForm.getRequestLevel().equals("titleLevel")) {                try {                    OLEPlaceRequest olePlaceRequest = null;                    String circulationResponse = null;                    if (olePlaceRequestForm.getTitleLevelRequestItems() != null && olePlaceRequestForm.getTitleLevelRequestItems().size() > 0) {                        for (OleTitleLevelRequestItem oleTitleLevelRequestItem : olePlaceRequestForm.getTitleLevelRequestItems()) {                            circulationResponse = getOleCirculationService().overridePlaceRequest(olePlaceRequestForm.getPatronBarcode(), GlobalVariables.getUserSession().getPrincipalId(), oleTitleLevelRequestItem.getItemBarcode(), olePlaceRequestForm.getRequestType(), olePlaceRequestForm.getPickUpLocationCode(), oleTitleLevelRequestItem.getItemLocation(), olePlaceRequestForm.getBibId(), "Title Level", olePlaceRequestForm.getRequestExpiryDate(), olePlaceRequestForm.getRequestNote());                            olePlaceRequest = (OLEPlaceRequest) olePlaceRequestConverter.generatePlaceRequestObject(circulationResponse);                            if(olePlaceRequest.getMessage().equals(OLEConstants.NO_RULE_FOUND) || olePlaceRequest.getMessage().equalsIgnoreCase(ConfigContext.getCurrentContextConfig().getProperty(OLEConstants.RQST_ALRDY_RAISD))){                                failureMessageBuffer.append(olePlaceRequest.getMessage());                                olePlaceRequest.setBlockOverride(false);                                olePlaceRequestForm.setBlockOverride(false);                            }                            else  if (olePlaceRequest.getMessage().contains(OLEConstants.RQST_SUCCESS)) {                                successMessageBuffer.append(olePlaceRequest.getMessage() + " with Barcode " + oleTitleLevelRequestItem.getItemBarcode() + OLEConstants.BREAK);                                if(olePlaceRequest.getExpirationDate()!=null) {                                    olePlaceRequestForm.setRequestExpiryDate(new java.sql.Date(expirationDate.parse(olePlaceRequest.getExpirationDate()).getTime()));                                }                            }                        }                    }                    olePlaceRequestForm.setSuccessMessage(successMessageBuffer.toString());                    olePlaceRequestForm.setErrorMessage(failureMessageBuffer.toString());                } catch (Exception e) {                    e.printStackTrace();                }            }        }        return getUIFModelAndView(form);    }    @RequestMapping(params = "methodToCall=getItemsForTitleLevelRequest")    public ModelAndView getItemsForTitleLevelRequest(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                                       HttpServletRequest request, HttpServletResponse response) throws Exception {        OLEPlaceRequestForm olePlaceRequestForm=(OLEPlaceRequestForm)form;        String bibIb = olePlaceRequestForm.getBibId();        List<OleTitleLevelRequestItem> titleLevelRequestItems = new ArrayList<OleTitleLevelRequestItem>();        OleTitleLevelRequestItem oleTitleLevelRequestItem;        try{            OLEPlaceRequest olePlaceRequest = null;            String circulationResponse = null;            StringBuffer successMessageBuffer = new StringBuffer();            StringBuffer failureMessageBuffer = new StringBuffer();            BibTree bibTree =  getDocstoreClientLocator().getDocstoreClient().retrieveBibTree(bibIb);            if(bibTree!=null && bibTree.getHoldingsTrees()!=null){                for(HoldingsTree holdingsTree : bibTree.getHoldingsTrees()){                    if(holdingsTree!=null && holdingsTree.getItems()!=null){                        for(Item item : holdingsTree.getItems()){                            org.kuali.ole.docstore.common.document.content.instance.Item itemContent = getItemOlemlRecordProcessor().fromXML(item.getContent());                            if(itemContent.getAccessInformation()!=null && itemContent.getAccessInformation().getBarcode()!=null){                            oleTitleLevelRequestItem = new OleTitleLevelRequestItem();                            oleTitleLevelRequestItem.setItemStatus(itemContent.getItemStatus().getCodeValue());                            oleTitleLevelRequestItem.setHoldingsId(item.getHolding().getId());                            oleTitleLevelRequestItem.setItemBarcode(itemContent.getAccessInformation().getBarcode());                            oleTitleLevelRequestItem.setItemLocation(item.getHolding().getLocationName());                            oleTitleLevelRequestItem.setItemType(itemContent.getItemType().getCodeValue());                            oleTitleLevelRequestItem.setVolumeNumber(itemContent.getEnumeration());                            titleLevelRequestItems.add(oleTitleLevelRequestItem);                            }                        }                    }                }            }            olePlaceRequestForm.setTitleLevelRequestItems(titleLevelRequestItems);        }catch(Exception e){            e.printStackTrace();        }        return getUIFModelAndView(form);    }    @RequestMapping(params = "methodToCall=getSelectedItemsFromResults")    public ModelAndView getSelectedItemsFromResults(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                                                     HttpServletRequest request, HttpServletResponse response) throws Exception {        OLEPlaceRequestForm olePlaceRequestForm=(OLEPlaceRequestForm)form;        List<OleTitleLevelRequestItem> oleTitleLevelRequestItems = new ArrayList<>();        if(olePlaceRequestForm.getTitleLevelRequestItems()!=null && olePlaceRequestForm.getTitleLevelRequestItems().size()>0){            for(OleTitleLevelRequestItem oleTitleLevelRequestItem : olePlaceRequestForm.getTitleLevelRequestItems()){                if(oleTitleLevelRequestItem.isSelectedItem()){                    oleTitleLevelRequestItems.add(oleTitleLevelRequestItem);                }            }        }        olePlaceRequestForm.setTitleLevelRequestItems(oleTitleLevelRequestItems);        return getUIFModelAndView(form);    }    @RequestMapping(params = "methodToCall=clearItemsForTitleLevelRequest")    public ModelAndView clearItemsForTitleLevelRequest(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                                                    HttpServletRequest request, HttpServletResponse response) throws Exception {        OLEPlaceRequestForm olePlaceRequestForm=(OLEPlaceRequestForm)form;        List<OleTitleLevelRequestItem> oleTitleLevelRequestItems = new ArrayList<>();        olePlaceRequestForm.setTitleLevelRequestItems(oleTitleLevelRequestItems);        return getUIFModelAndView(form);    }    @RequestMapping(params = "methodToCall=cancelRequest")    public ModelAndView cancelRequest(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                                                       HttpServletRequest request, HttpServletResponse response) throws Exception {        OLEPlaceRequestForm olePlaceRequestForm=(OLEPlaceRequestForm)form;        olePlaceRequestForm.setRecallRequestType(null);        olePlaceRequestForm.setPageRequestType(null);        olePlaceRequestForm.setCopyRequestType(null);        olePlaceRequestForm.setAsrRequestType(null);        olePlaceRequestForm.setHoldRequestType(null);        return getUIFModelAndView(form);    }    private java.sql.Date addDate(java.sql.Date in, int daysToAdd) {        if (in == null) {            return null;        }        GregorianCalendar cal = new GregorianCalendar();        cal.setTime(in);        cal.add(Calendar.DAY_OF_MONTH, daysToAdd);        return new java.sql.Date(cal.getTime().getTime());    }    public boolean validatePatronNewAddress(OLEPlaceRequestForm olePlaceRequestForm){        boolean validAddress = true;        EntityAddressBo oleEntityAddressBo = olePlaceRequestForm.getOleEntityAddressBo();        if(StringUtils.isNotBlank(oleEntityAddressBo.getLine1()) || StringUtils.isNotBlank(oleEntityAddressBo.getLine2()) ||StringUtils.isNotBlank(oleEntityAddressBo.getLine3())               || StringUtils.isNotBlank(oleEntityAddressBo.getCity()) || StringUtils.isNotBlank(oleEntityAddressBo.getStateProvinceCode()) || StringUtils.isNotBlank(oleEntityAddressBo.getPostalCode())                || StringUtils.isNotBlank(oleEntityAddressBo.getCountryCode())){            if(StringUtils.isBlank(oleEntityAddressBo.getAddressTypeCode())){                validAddress = false;            }        }        return validAddress;    }    public boolean validateItemStatus(OLEPlaceRequestForm olePlaceRequestForm){        boolean valid = false;        String copyRequestItemStatus = getLoanProcessor().getParameter(OLEConstants.COPY_REQUEST_ITEM_STATUS);        if (StringUtils.isNotBlank(copyRequestItemStatus)) {            String[] itemStatusArray = copyRequestItemStatus.split(";");            for(String itemStatus : itemStatusArray){                if(itemStatus.trim().equalsIgnoreCase(olePlaceRequestForm.getItemStatus())){                    valid = true;                    return valid;                }            }        }        String holdDeliveryItemStatus = getLoanProcessor().getParameter(OLEConstants.HOLD_DELIVERY_ITEM_STATUS);        if (StringUtils.isNotBlank(holdDeliveryItemStatus)) {            String[] itemStatusArray = holdDeliveryItemStatus.split(";");            for(String itemStatus : itemStatusArray){                if(itemStatus.trim().equalsIgnoreCase(olePlaceRequestForm.getItemStatus())){                    valid = true;                    return valid;                }            }        }        String holdHoldItemStatus = getLoanProcessor().getParameter(OLEConstants.HOLD_HOLD_ITEM_STATUS);        if (StringUtils.isNotBlank(holdHoldItemStatus)) {            String[] itemStatusArray = holdHoldItemStatus.split(";");            for(String itemStatus : itemStatusArray){                if(itemStatus.trim().equalsIgnoreCase(olePlaceRequestForm.getItemStatus())){                    valid = true;                    return valid;                }            }        }        String pageDeliveryItemStatus = getLoanProcessor().getParameter(OLEConstants.PAGE_DELIVERY_ITEM_STATUS);        if (StringUtils.isNotBlank(pageDeliveryItemStatus)) {            String[] itemStatusArray = pageDeliveryItemStatus.split(";");            for(String itemStatus : itemStatusArray){                if(itemStatus.trim().equalsIgnoreCase(olePlaceRequestForm.getItemStatus())){                    valid = true;                    return valid;                }            }        }        String pageHoldItemStatus = getLoanProcessor().getParameter(OLEConstants.PAGE_HOLD_ITEM_STATUS);        if (StringUtils.isNotBlank(pageHoldItemStatus)) {            String[] itemStatusArray = pageHoldItemStatus.split(";");            for(String itemStatus : itemStatusArray){                if(itemStatus.trim().equalsIgnoreCase(olePlaceRequestForm.getItemStatus())){                    valid = true;                    return valid;                }            }        }        String recallDeliveryItemStatus = getLoanProcessor().getParameter(OLEConstants.RECALL_DELIVERY_ITEM_STATUS);        if (StringUtils.isNotBlank(recallDeliveryItemStatus)) {            String[] itemStatusArray = recallDeliveryItemStatus.split(";");            for(String itemStatus : itemStatusArray){                if(itemStatus.trim().equalsIgnoreCase(olePlaceRequestForm.getItemStatus())){                    valid = true;                    return valid;                }            }        }        String recallHoldItemStatus = getLoanProcessor().getParameter(OLEConstants.RECALL_HOLD_ITEM_STATUS);        if (StringUtils.isNotBlank(recallHoldItemStatus)) {            String[] itemStatusArray = recallHoldItemStatus.split(";");            for(String itemStatus : itemStatusArray){                if(itemStatus.trim().equalsIgnoreCase(olePlaceRequestForm.getItemStatus())){                    valid = true;                    return valid;                }            }        }        return valid;    }    public boolean isRequestAlreadyRaisedByPatron(String patronId,String itemId){      boolean requestExist = false;        List<OleDeliverRequestBo> oleDeliverRequestBoList ;        Map<String,String> requestMap =new HashMap<String,String>();        requestMap.put("borrowerId",patronId);        requestMap.put("itemId",itemId);        oleDeliverRequestBoList = (List<OleDeliverRequestBo>)getBusinessObjectService().findMatching(OleDeliverRequestBo.class,requestMap);              if(oleDeliverRequestBoList.size()>0){                  requestExist = true;              }                return requestExist;    }    @RequestMapping(params = "methodToCall=close")    public ModelAndView close(@ModelAttribute("KualiForm") UifFormBase form, BindingResult result,                                                       HttpServletRequest request, HttpServletResponse response) throws Exception {        String baseUrl = ConfigContext.getCurrentContextConfig().getProperty(OLEPropertyConstants.OLE_URL_BASE);        String url = baseUrl + "/portal.do";        Properties props = new Properties();        props.put(UifParameters.METHOD_TO_CALL, UifConstants.MethodToCallNames.REFRESH);        if (StringUtils.isNotBlank(form.getReturnFormKey())) {            props.put(UifParameters.FORM_KEY, form.getReturnFormKey());        }        return performRedirect(form, url, props);    }}